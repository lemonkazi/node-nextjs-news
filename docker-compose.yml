version: '3.8'

services:
  api:
    restart: unless-stopped
    build: ./api
    labels:
      project: "node-practice"
      environment: local
      company: " Inc"
    ports:
      - "5000:5000"
    environment:
      - PORT=5000
      - DB_HOST=db
      - DB_USER=user
      - DB_PASSWORD=password
      - DB_NAME=news_aggregator
      - NODE_ENV=development
    command: npm run dev
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "node"]
      interval: 5s
      timeout: 10s
      retries: 5
    depends_on:
      db:
        condition: service_healthy
        
  front:
    build: ./frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - API_ENDPOINT=http://api:5000/api/v1
    networks:
      - app-network
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: npm run dev
    healthcheck:
      test: ["CMD", "node"]
      interval: 10s
      timeout: 5s
      retries: 5
      
  phpmyadmin:
    image: phpmyadmin:latest
    container_name: phpmyadmin_node
    restart: unless-stopped
    ports:
      # bind on our 5020 port because most people have 80, 8080 already bound
      - "5010:80"
    depends_on:
      # build those images first
      - db
    links:
      - db
    labels:
      project: "node-practice"
      environment: local
      company: " Inc"
    env_file: ./docker/phpmyadmin/phpmyadmin.env
    environment:
      - PMA_ARBITRARY=0
      - PMA_SERVER_DEFAULT=1
    volumes:
      - ./docker/phpmyadmin/config.user.inc.php:/etc/phpmyadmin/config.user.inc.php
    networks:
      - app-network

  db:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: news_aggregator
      MYSQL_USER: user
      MYSQL_PASSWORD: password
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/api/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network
    ports:
      - "3306:3306"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 5s
      timeout: 10s
      retries: 5

networks:
  app-network:
    driver: bridge

volumes:
  mysql_data:
